{
  "name": "marked",
  "version": "0.2.10",
  "repo": "chjj/marked",
  "description": "A markdown parser built for speed",
  "keywords": [
    "markdown",
    "markup",
    "html"
  ],
  "scripts": [
    "lib/marked.js"
  ],
  "main": "lib/marked.js",
  "license": "MIT",
  "gitHead": "0d27d58f16e3aa478cbc89a9a304e592e2862c5a",
  "readme": "# marked\r\n\r\n> A full-featured markdown parser and compiler, written in javascript. Built\r\n> for speed.\r\n\r\n[![NPM version](https://badge.fury.io/js/marked.png)][badge]\r\n\r\n## Install\r\n\r\n``` bash\r\nnpm install marked --save\r\n```\r\n\r\n## Usage\r\n\r\nMinimal usage:\r\n\r\n```js\r\nconsole.log(marked('I am using __markdown__.'));\r\n// Outputs: <p>I am using <i>markdown</i>.</p>\r\n```\r\n\r\nExample using all options:\r\n\r\n```js\r\n// Set default options except highlight which has no default\r\nmarked.setOptions({\r\n  gfm: true,\r\n  highlight: function (code, lang, callback) {\r\n    pygmentize({ lang: lang, format: 'html' }, code, function (err, result) {\r\n      if (err) return callback(err);\r\n      callback(null, result.toString());\r\n    });\r\n  },\r\n  tables: true,\r\n  breaks: false,\r\n  pedantic: false,\r\n  sanitize: true,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  langPrefix: 'lang-'\r\n});\r\n\r\n// Using async version of marked\r\nmarked('I am using __markdown__.', function (err, content) {\r\n  if (err) throw err;\r\n  console.log(content);\r\n});\r\n```\r\n\r\n## marked(markdownString, [options], [callback])\r\n\r\n### markdownString\r\n\r\nType: `String`\r\n\r\nString of markdown source to be compiled.\r\n\r\n### options\r\n\r\nType: `Object`\r\n\r\nHash of options. Can also be set using the `marked.setOptions` method as seen\r\nabove.\r\n\r\n### callback\r\n\r\nType: `Function`\r\n\r\nFunction called when the `markdownString` has been fully parsed when using\r\nasync highlighting. If the `options` argument is omitted, this can be used as\r\nthe second argument as seen above:\r\n\r\n## Options\r\n\r\n### gfm\r\n\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nEnable [GitHub flavored markdown][gfm].\r\n\r\n### highlight\r\n\r\nType: `Function`\r\n\r\nA function to highlight code blocks. The function takes three arguments: code,\r\nlang, and callback. The above example uses async highlighting with\r\n[node-pygementize-bundled][pygmentize], and here is a synchronous example using\r\n[highlight.js][highlight] which doesn't require the callback argument:\r\n\r\n```js\r\nmarked.setOptions({\r\n  highlight: function (code, lang) {\r\n    return hljs.highlightAuto(lang, code).value;\r\n  }\r\n});\r\n```\r\n\r\n#### highlight arguments\r\n\r\n`code`\r\n\r\nType: `String`\r\n\r\nThe section of code to pass to the highlighter.\r\n\r\n`lang`\r\n\r\nType: `String`\r\n\r\nThe programming language specified in the code block.\r\n\r\n`callback`\r\n\r\nType: `String`\r\n\r\nThe callback function to call when using an async highlighter.\r\n\r\n### tables\r\n\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nEnable GFM [tables][tables].\r\nThis option requires the `gfm` option to be true.\r\n\r\n### breaks\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nEnable GFM [line breaks][breaks].\r\nThis option requires the `gfm` option to be true.\r\n\r\n### pedantic\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nConform to obscure parts of `markdown.pl` as much as possible. Don't fix any of\r\nthe original markdown bugs or poor behavior.\r\n\r\n### sanitize\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nSanitize the output. Ignore any HTML that has been input.\r\n\r\n### smartLists\r\n\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nUse smarter list behavior than the original markdown. May eventually be\r\ndefault with the old behavior moved into `pedantic`.\r\n\r\n### smartypants\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nUse \"smart\" typograhic punctuation for things like quotes and dashes.\r\n\r\n### langPrefix\r\n\r\nType: `String`\r\nDefault: `lang-`\r\n\r\nSet the prefix for code block classes.\r\n\r\n## Access to lexer and parser\r\n\r\nYou also have direct access to the lexer and parser if you so desire.\r\n\r\n``` js\r\nvar tokens = marked.lexer(text, options);\r\nconsole.log(marked.parser(tokens));\r\n```\r\n\r\n``` js\r\nvar lexer = new marked.Lexer(options);\r\nvar tokens = lexer.lex(text);\r\nconsole.log(tokens);\r\nconsole.log(lexer.rules);\r\n```\r\n\r\n## CLI\r\n\r\n``` bash\r\n$ marked -o hello.html\r\nhello world\r\n^D\r\n$ cat hello.html\r\n<p>hello world</p>\r\n```\r\n\r\n## Benchmarks\r\n\r\nnode v0.4.x\r\n\r\n``` bash\r\n$ node test --bench\r\nmarked completed in 12071ms.\r\nshowdown (reuse converter) completed in 27387ms.\r\nshowdown (new converter) completed in 75617ms.\r\nmarkdown-js completed in 70069ms.\r\n```\r\n\r\nnode v0.6.x\r\n\r\n``` bash\r\n$ node test --bench\r\nmarked completed in 6448ms.\r\nmarked (gfm) completed in 7357ms.\r\nmarked (pedantic) completed in 6092ms.\r\ndiscount completed in 7314ms.\r\nshowdown (reuse converter) completed in 16018ms.\r\nshowdown (new converter) completed in 18234ms.\r\nmarkdown-js completed in 24270ms.\r\n```\r\n\r\n__Marked is now faster than Discount, which is written in C.__\r\n\r\nFor those feeling skeptical: These benchmarks run the entire markdown test suite\r\n1000 times. The test suite tests every feature. It doesn't cater to specific\r\naspects.\r\n\r\nnode v0.8.x\r\n\r\n``` bash\r\n$ node test --bench\r\nmarked completed in 3411ms.\r\nmarked (gfm) completed in 3727ms.\r\nmarked (pedantic) completed in 3201ms.\r\nrobotskirt completed in 808ms.\r\nshowdown (reuse converter) completed in 11954ms.\r\nshowdown (new converter) completed in 17774ms.\r\nmarkdown-js completed in 17191ms.\r\n```\r\n\r\n## Another Javascript Markdown Parser\r\n\r\nThe point of marked was to create a markdown compiler where it was possible to\r\nfrequently parse huge chunks of markdown without having to worry about\r\ncaching the compiled output somehow...or blocking for an unnecesarily long time.\r\n\r\nmarked is very concise and still implements all markdown features. It is also\r\nnow fully compatible with the client-side.\r\n\r\nmarked more or less passes the official markdown test suite in its\r\nentirety. This is important because a surprising number of markdown compilers\r\ncannot pass more than a few tests. It was very difficult to get marked as\r\ncompliant as it is. It could have cut corners in several areas for the sake\r\nof performance, but did not in order to be exactly what you expect in terms\r\nof a markdown rendering. In fact, this is why marked could be considered at a\r\ndisadvantage in the benchmarks above.\r\n\r\nAlong with implementing every markdown feature, marked also implements [GFM\r\nfeatures][gfmf].\r\n\r\n``` bash\r\n$ node\r\n> require('marked').lexer('> i am using marked.')\r\n[ { type: 'blockquote_start' },\r\n  { type: 'paragraph',\r\n    text: 'i am using marked.' },\r\n  { type: 'blockquote_end' },\r\n  links: {} ]\r\n```\r\n\r\n## Running Tests & Contributing\r\n\r\nIf you want to submit a pull request, make sure your changes pass the test\r\nsuite. If you're adding a new feature, be sure to add your own test.\r\n\r\nThe marked test suite is set up slightly strangely: `test/new` is for all tests\r\nthat are not part of the original markdown.pl test suite (this is where your\r\ntest should go if you make one). `test/original` is only for the original\r\nmarkdown.pl tests. `test/tests` houses both types of tests after they have been\r\ncombined and moved/generated by running `node test --fix` or `marked --test\r\n--fix`.\r\n\r\nIn other words, if you have a test to add, add it to `test/new/` and then\r\nregenerate the tests with `node test --fix`. Commit the result. If your test\r\nuses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\r\ncan add `.nogfm` to the filename. So, `my-test.text` becomes\r\n`my-test.nogfm.text`. You can do this with any marked option. Say you want\r\nline breaks and smartypants enabled, your filename should be:\r\n`my-test.breaks.smartypants.text`.\r\n\r\nTo run the tests:\r\n\r\n``` bash\r\ncd marked/\r\nnode test\r\n```\r\n\r\n### Contribution and License Agreement\r\n\r\nIf you contribute code to marked, you are implicitly allowing your code to be\r\ndistributed under the MIT license. You are also implicitly verifying that all\r\ncode is your original work. `</legalese>`\r\n\r\n## License\r\n\r\nCopyright (c) 2011-2013, Christopher Jeffrey. (MIT License)\r\n\r\nSee LICENSE for more info.\r\n\r\n[gfm]: https://help.github.com/articles/github-flavored-markdown\r\n[gfmf]: http://github.github.com/github-flavored-markdown/\r\n[pygmentize]: https://github.com/rvagg/node-pygmentize-bundled\r\n[highlight]: https://github.com/isagalaev/highlight.js\r\n[badge]: http://badge.fury.io/js/marked\r\n[tables]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\r\n[breaks]: https://help.github.com/articles/github-flavored-markdown#newlines\r\n",
  "readmeFilename": "README.md",
  "_id": "marked@0.2.9",
  "repository": {
    "type": "git",
    "url": "git://github.com/chjj/marked.git"
  }
}